// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract DGNToken is ERC20, Ownable {
  event TokensMinted(address indexed receiver, uint256 amount);

  //  Item IDs 
  enum Item {
    LACE,
    MOUSEPAD,
    DEGEN_CAP,
    DEGEN_HOODIE,
    DEGEN_MOUSE_KEYBOARD
  }
  mapping(Item => uint256) public itemPrices;

  constructor() ERC20("Degen", "DGN") Ownable(msg.sender) {
    // Mint initial supply to the contract deployer
    _mint(msg.sender, 15000 * 1**decimals());

    itemPrices[Item.LACE] = 1000;
    itemPrices[Item.MOUSEPAD] = 2000;
    itemPrices[Item.DEGEN_CAP] = 4000;
    itemPrices[Item.DEGEN_HOODIE] = 5000;
    itemPrices[Item.DEGEN_MOUSE_KEYBOARD] = 10000;
  }

  function mint(address _to, uint256 _amount) public onlyOwner {
    _mint(_to, _amount);
    emit TokensMinted(_to, _amount);
  }

  function transferTokens(address _to, uint256 _amount) public {
    _transfer(msg.sender, _to, _amount);
  }

  function redeemTokens(Item _item) public {
    uint256 itemPrice = itemPrices[_item];
    require(balanceOf(msg.sender) >= itemPrice, "Insufficient balance");


    // Burn tokens for the redeemed item
    _burn(msg.sender, itemPrice);
  }

  function checkTokenBalance(address _player) public view returns (uint256) {
    return balanceOf(_player);
  }

  function burnTokens(uint256 _amount) public {
    require(balanceOf(msg.sender) >= _amount, "Insufficient balance");
    _burn(msg.sender, _amount);
  }
}
